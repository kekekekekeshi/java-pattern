package ink.cecece.pattern.struction.facade;

import org.junit.Test;

/**
 * 外观模式（使用最多最重要，是迪米特法则的典型应用）
 *      - 是一种通过为多个复杂的子系统提供一个一致的接口，而使这些子系统更加容易被访问的模式。该模式对外有一个统一接口，外部应用程序不用关心内部子系统的具体的细节，这样会大大降低应用程序的复杂度，提高了程序的可维护性。
 * 优点
 *      - 降低了子系统与客户端之间的耦合度，使得子系统的变化不会影响调用它的客户类。
 *      - 对客户屏蔽了子系统组件，减少了客户处理的对象数目，并使得子系统使用起来更加容易。
 *      - 降低了大型软件系统中的编译依赖性，简化了系统在不同平台之间的移植过程，因为编译一个子系统不会影响其他的子系统，也不会影响外观对象。
 * 缺点
 *      - 不能很好地限制客户使用子系统类。
 *      - 增加新的子系统可能需要修改外观类或客户端的源代码，违背了“开闭原则”。
 * 结构
 *      - 外观角色：为多个子系统对外提供一个共同的接口。
 *      - 子系统角色：实现系统的部分功能，客户可以通过外观角色访问它。
 *      - 客户角色：通过一个外观角色访问各个子系统的功能。
 */
public class FacadeTest {

    @Test
    public void test(){
        Facade facade = new Facade();
        facade.doAction();
    }
}
